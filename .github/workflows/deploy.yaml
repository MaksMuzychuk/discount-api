name: CI/CD with Terraform
on:
  push:
    branches:
      - main

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_STATE_BUCKET_NAME: ${{ secrets.AWS_TF_STATE_BUCKET_NAME }}
  PRIVATE_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
  PUBLIC_SSH_KEY: ${{ secrets.AWS_SSH_KEY_PUBLIC }}
  AWS_REGION: us-east-1
  IMAGE_REPOSITORY: discount-api

jobs:
  build-test-image:
    runs-on: ubuntu-latest
    outputs:
      REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Update job output
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: echo "registry=$REGISTRY" >> $GITHUB_OUTPUT
      - name: Build
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: docker build -t $REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG --build-arg="NODE_ENV=build" .
      - name: Push image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
        run: docker push $REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
  deploy-infra:
    runs-on: ubuntu-latest
    needs: build-test-image
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip-staging.outputs.instance_public_ip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false
      - name: Terraform init
        id: init
        run: terraform init -backend-config="bucket=$TF_STATE_BUCKET_NAME" -backend-config="region=us-east-1"
        working-directory: ./terraform
      - name: Terraform Plan Staging
        id: plan
        run: |-
          terraform workspace select staging
          terraform plan \
          -var="region=us-east-1" \
          -var="public_key=$PUBLIC_SSH_KEY" \
          -var="private_key=$PRIVATE_SSH_KEY" \
          -var="key_name=deployer-key" \
          -out=PLAN_STAGING
        working-directory: ./terraform
      - name: Terraform Apply Staging
        id: apply
        run: |-
          terraform apply PLAN_STAGING
        working-directory: ./terraform
      - name: Set output
        id: set-ip-staging
        run: echo instance_public_ip=$(terraform output -raw instance_public_ip) >> $GITHUB_OUTPUT
        working-directory: ./terraform
  deploy-app:
    runs-on: ubuntu-latest
    needs: [deploy-infra, build-test-image]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      - name: Deploy docker image to EC2
        env:
          REGISTRY: ${{ needs.build-test-image.outputs.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          AWS_DEFAULT_REGION: us-east-1
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.SERVER_PUBLIC_IP }}
          username: ubuntu
          envs: REGISTRY,IMAGE_REPOSITORY,IMAGE_TAG,AWS_DEFAULT_REGION
          key: ${{ env.PRIVATE_SSH_KEY }}
          script: |-
            sudo apt upgrade
            sudo apt update 2>/dev/null
            sudo apt install docker.io -y
            sudo apt install awscli -y
            sudo $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION);
            sudo docker stop myappcontainer || true
            sudo docker rm myappcontainer || true
            sudo docker pull $REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
            echo "$REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG"
            sudo docker run -d -p 5000:5000 --name myappcontainer $REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG
  test-app:
    runs-on: ubuntu-latest
    needs: [deploy-infra, build-test-image, deploy-app]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: E2E tests
        env:
          REGISTRY: ${{ needs.build-test-image.outputs.REGISTRY }}
          IMAGE_TAG: ${{ github.sha }}
          SERVER_PUBLIC_IP: ${{ needs.deploy-infra.outputs.SERVER_PUBLIC_IP }}
        run: |-
          docker run \
            -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
            -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
            -e SERVER_IP=$SERVER_PUBLIC_IP \
            --rm $REGISTRY/$IMAGE_REPOSITORY:$IMAGE_TAG \
            npm run test:e2e
